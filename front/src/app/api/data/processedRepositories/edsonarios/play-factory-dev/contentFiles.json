{
  ".eslintrc.cjs": "module.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2020: true,\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:react-hooks/recommended',\n    \"standard-with-typescript\",\n    \"plugin:react/recommended\",\n    'plugin:prettier/recommended',\n  ],\n  ignorePatterns: ['dist', '.eslintrc.cjs'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: 'tsconfig.json',\n    tsconfigRootDir: __dirname,\n    sourceType: 'module',\n  },\n  plugins: ['@typescript-eslint/eslint-plugin'],\n  rules: {\n    'react-refresh/only-export-components': [\n      'warn',\n      { allowConstantExport: true },\n    ],\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    \"@typescript-eslint/explicit-function-return-type\": \"off\",\n    \"react/react-in-jsx-scope\": \"off\",\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"react-refresh/only-export-components\": \"off\",\n    \"@typescript-eslint/no-misused-promises\": \"off\",\n  },\n}\n",
  ".github/workflows/build.yml": "name: Build and Release\n\non:\n  push:\n    tags:\n      - '*.*.*'\n  workflow_dispatch:\n    inputs:\n      reason:\n        description: 'Build'\n        required: true\n        default: 'Manual deployment'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node-version: [20.x]\n\n    env:\n      GH_TOKEN: ${{ secrets.GH_TOKEN }}\n\n    steps:\n      - name: Check Credentials\n        run: |\n          echo \"GH_TOKEN = ${{ env.GH_TOKEN }}\"\n          if [ -z \"${{ env.GH_TOKEN }}\" ]; then\n            echo \"Error: Credential for GitHub is not set. Current value '${{ env.GH_TOKEN }}'.\"\n            exit 1\n          fi\n        shell: bash\n\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Check if Release Exists\n        id: check_release\n        run: |\n          if gh release view ${{ github.ref_name }} > /dev/null 2>&1; then\n            echo \"RELEASE_EXISTS=true\" >> $GITHUB_ENV\n          else\n            echo \"RELEASE_EXISTS=false\" >> $GITHUB_ENV\n          fi\n        env:\n          GH_TOKEN: ${{ env.GH_TOKEN }}\n        shell: bash\n\n      - name: Create Release\n        if: env.RELEASE_EXISTS == 'false' && matrix.os == 'macos-latest'\n        id: create_release\n        run: |\n          gh release create ${{ github.ref_name }} --title \"${{ github.ref_name }}\" --notes \"Release ${{ github.ref_name }}\"\n        env:\n          GH_TOKEN: ${{ env.GH_TOKEN }}\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Install GitHub CLI for ${{ matrix.os }}\n        run: |\n          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then\n            sudo apt-get install gh -y\n          elif [ ${{ matrix.os }} == 'macos-latest' ]; then\n            brew install gh\n          elif [ ${{ matrix.os }} == 'windows-latest' ]; then\n            choco install gh\n          fi\n        shell: bash\n\n      - name: Build Electron App\n        run: npm run build\n\n      - name: Get Release Upload URL\n        run: echo \"RELEASE_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}\" >> $GITHUB_ENV\n        if: steps.create_release.outputs.upload_url != ''\n      \n      # Windows\n      - name: Upload Windows Assets\n        if: matrix.os == 'windows-latest'\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            release/**/Play-Factory-Windows-${{ github.ref_name }}.exe\n            release/**/Play-Factory-Windows-${{ github.ref_name }}.exe.blockmap\n            release/**/latest.yml\n            release/**/builder-debug.yml\n        env:\n          GITHUB_TOKEN: ${{ env.GH_TOKEN }}\n          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}\n\n      # Linux\n      - name: Upload Linux Assets\n        if: matrix.os == 'ubuntu-latest'\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            release/**/latest-linux.yml\n            release/**/Play-Factory-Linux-${{ github.ref_name }}.deb\n        env:\n          GITHUB_TOKEN: ${{ env.GH_TOKEN }}\n          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}\n\n      # macOS\n      - name: Upload macOS Assets\n        if: matrix.os == 'macos-latest'\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            release/**/Play-Factory-Mac-${{ github.ref_name }}-universal.dmg\n            release/**/Play-Factory-Mac-${{ github.ref_name }}-universal.blockmap\n            release/**/latest-mac.yml\n        env:\n          GITHUB_TOKEN: ${{ env.GH_TOKEN }}\n          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}\n",
  ".gitignore": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\ndist\ndist-ssr\ndist-electron\nrelease\n*.local\n\n# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\nassets\n",
  ".prettierrc": "{\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\",\n  \"semi\": false,\n  \"endOfLine\": \"auto\"\n}",
  "electron/components/menuFFmpeg.ts": "import fs from 'node:fs'\nimport { exec } from 'node:child_process'\nimport { BrowserWindow, Menu, MenuItem, app, dialog, ipcMain } from 'electron'\nimport {\n  checkSO,\n  currentPlayFactoryConfigs,\n  formatBytes,\n  playFactoryConfigsPath,\n} from '../utils'\nimport path from 'node:path'\nimport axios from 'axios'\nimport { type IStatusDownload } from '../entities/statusDownload.entity'\nimport AdmZip from 'adm-zip'\nimport {\n  ffmpegFileExtension,\n  releaseFFmpegName,\n  urlFFmpegToDownload,\n} from '../releases.constants'\n\nexport function addFFmpegMenu() {\n  const menu = Menu.getApplicationMenu()\n  if (menu !== null) {\n    const newMenuFfmpeg = new MenuItem({\n      label: 'FFmpeg',\n      submenu: [\n        {\n          label: 'Check version',\n          click: () => {\n            checkFFmpegVersion()\n          },\n        },\n        {\n          label: 'Find in system',\n          click: () => {\n            findFFmpegBinary()\n          },\n        },\n        {\n          label: 'Download FFmpeg',\n          click: async () => {\n            await DownloadAndExtractedFFmpeg()\n          },\n        },\n      ],\n    })\n    menu.insert(1, newMenuFfmpeg)\n\n    Menu.setApplicationMenu(menu)\n  }\n}\n\nexport function checkFFmpegVersion(\n  ffmpegPath = currentPlayFactoryConfigs().ffmpegPath ?? 'ffmpeg',\n) {\n  const command = `${ffmpegPath} -version`\n  exec(command, (error) => {\n    const mainWindow = BrowserWindow.getAllWindows()[0]\n    if (error !== null) {\n      mainWindow.webContents.send('ffmpeg-status', 'FFmpeg not found')\n    } else {\n      savePathFFmpeg(ffmpegPath)\n      mainWindow.webContents.send('ffmpeg-status', 'FFmpeg correctly installed')\n    }\n  })\n}\n\n// Find FFmpeg binary\nfunction findFFmpegBinary() {\n  const result = dialog.showOpenDialogSync({\n    title: 'Find ffmpeg binary',\n  })\n  if (result === undefined || result.length === 0) return\n  const path = result[0]\n  const mainWindow = BrowserWindow.getAllWindows()[0]\n  if (path.endsWith('ffmpeg.exe') || path.endsWith('ffmpeg')) {\n    checkFFmpegVersion(path)\n  } else {\n    mainWindow.webContents.send('ffmpeg-status', 'Invalid file')\n  }\n}\n\n// Save the path of FFmpeg\nfunction savePathFFmpeg(path: string) {\n  fs.writeFileSync(\n    playFactoryConfigsPath(),\n    JSON.stringify({ ...currentPlayFactoryConfigs(), ffmpegPath: path }),\n  )\n}\n\nasync function downloadFile(url: string, outputPath: string, onProgress: any) {\n  const writer = fs.createWriteStream(outputPath)\n\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  })\n\n  const totalLength = parseInt(response.headers['content-length'], 10)\n\n  let downloadedLength = 0\n  let lastPercentage = 0\n\n  response.data.on('data', (chunk: any) => {\n    downloadedLength += chunk.length\n    const percentage = Math.round((downloadedLength / totalLength) * 100)\n    if (percentage !== lastPercentage) {\n      lastPercentage = percentage\n      onProgress({\n        error: '',\n        message: 'Downloading FFmpeg...',\n        percentage,\n        totalLength: formatBytes(totalLength),\n        elapsedLength: formatBytes(downloadedLength),\n      })\n    }\n  })\n\n  response.data.pipe(writer)\n\n  return await new Promise((resolve, reject) => {\n    writer.on('finish', resolve)\n    writer.on('error', reject)\n  })\n}\n\nasync function unzipFile(zipPath: string, outputPath: string, onProgress: any) {\n  const zip = new AdmZip(zipPath)\n  const zipEntries = zip.getEntries()\n  const totalSize = zipEntries.reduce(\n    (acc, entry) => acc + entry.header.size,\n    0,\n  )\n\n  let extractedSize = 0\n  let lastPercentage = 0\n\n  for (const entry of zipEntries) {\n    const entryPath = path.join(outputPath, entry.entryName)\n    if (entry.isDirectory) {\n      fs.mkdirSync(entryPath, { recursive: true })\n    } else {\n      fs.writeFileSync(entryPath, entry.getData())\n      fs.chmodSync(entryPath, '755')\n      extractedSize += entry.header.size\n      const percentage = Math.round((extractedSize / totalSize) * 100)\n      if (percentage !== lastPercentage) {\n        lastPercentage = percentage\n        onProgress({\n          error: '',\n          message: 'Extracting FFmpeg...',\n          percentage,\n          totalLength: formatBytes(totalSize),\n          elapsedLength: formatBytes(extractedSize),\n        })\n      }\n    }\n  }\n}\n\nasync function untarFile(\n  zipPath: string,\n  outputPath: string,\n  progressDataObjet: IStatusDownload,\n  checkFFmpegPath: string,\n) {\n  // Create output directory\n  exec(`mkdir ${outputPath}`)\n\n  const mainWindow = BrowserWindow.getAllWindows()[0]\n  const commandToExecute = `tar -xvf ${zipPath} -C ${outputPath}`\n\n  const ffmpegProcess = exec(commandToExecute)\n  ffmpegProcess.stderr?.on('data', (data) => {\n    console.log(data)\n    // mainWindow?.webContents.send('download-ffmpeg-status', data)\n  })\n  let mockProgress = 0\n  ffmpegProcess.stdout?.on('data', (_data) => {\n    if (mockProgress <= 90) {\n      mockProgress++\n    }\n    mainWindow?.webContents.send('download-ffmpeg-status', {\n      ...progressDataObjet,\n      message: 'Extracting FFmpeg...',\n      percentage: mockProgress,\n      totalLength: 100,\n      elapsedLength: mockProgress,\n    })\n  })\n\n  ffmpegProcess.on('close', async (code) => {\n    if (code === 0) {\n      mainWindow?.webContents.send('download-ffmpeg-status', {\n        ...progressDataObjet,\n        message: 'FFmpeg downloaded and extracted successfully',\n        completed: true,\n      })\n      checkFFmpegVersion(checkFFmpegPath)\n    } else {\n      mainWindow?.webContents.send('download-ffmpeg-status', {\n        ...progressDataObjet,\n        error: 'Error extracting FFmpeg',\n      })\n    }\n  })\n}\nasync function DownloadAndExtractedFFmpeg() {\n  const os = checkSO()\n  const outputPath = path.join(app.getPath('home'), ffmpegFileExtension)\n\n  const mainWindow = BrowserWindow.getAllWindows()[0]\n  let progressDataObjet: IStatusDownload = {\n    message: '',\n    percentage: 0,\n    totalLength: '',\n    elapsedLength: '',\n    completed: false,\n    error: '',\n  }\n  try {\n    await downloadFile(\n      urlFFmpegToDownload,\n      outputPath,\n      (progressData: IStatusDownload) => {\n        progressDataObjet = progressData\n        mainWindow?.webContents.send(\n          'download-ffmpeg-status',\n          progressDataObjet,\n        )\n      },\n    )\n\n    mainWindow?.webContents.send('download-ffmpeg-status', {\n      ...progressDataObjet,\n      message: 'FFmpeg downloaded successfully',\n      completed: true,\n    })\n\n    // Unzip FFmpeg\n    const unzipPath = path.join(app.getPath('home'), 'ffmpeg')\n    const checkFFmpegPath =\n      os === 'win' || os === 'linux'\n        ? path.join(unzipPath, releaseFFmpegName, 'bin', 'ffmpeg')\n        : path.join(unzipPath, 'ffmpeg')\n    if (os === 'win' || os === 'mac') {\n      if (os === 'mac') {\n        exec(`mkdir ${unzipPath}`)\n      }\n      await unzipFile(\n        outputPath,\n        unzipPath,\n        (progressData: IStatusDownload) => {\n          progressDataObjet = progressData\n          mainWindow?.webContents.send('download-ffmpeg-status', progressData)\n        },\n      )\n      mainWindow?.webContents.send('download-ffmpeg-status', {\n        ...progressDataObjet,\n        message: 'FFmpeg downloaded and extracted successfully',\n        completed: true,\n      })\n      checkFFmpegVersion(checkFFmpegPath)\n    }\n    if (os === 'linux') {\n      await untarFile(outputPath, unzipPath, progressDataObjet, checkFFmpegPath)\n    }\n  } catch (error: any) {\n    console.log('Download error', error.message)\n    mainWindow?.webContents.send('download-ffmpeg-status', {\n      ...progressDataObjet,\n      error: error.message,\n    })\n  }\n}\n\nipcMain.on('download-ffmpeg', async (_event) => {\n  await DownloadAndExtractedFFmpeg()\n})\n\nipcMain.on('check-ffmpeg', (_event) => {\n  checkFFmpegVersion()\n})\n\nipcMain.on('find-ffmpeg', (_event) => {\n  findFFmpegBinary()\n})\n",
  "electron/components/menuFile.ts": "import { BrowserWindow, Menu, MenuItem, dialog, ipcMain } from 'electron'\nexport const allowedExtensions = new Set([\n  'mp3',\n  'wav',\n  'flac',\n  'mp4',\n  'mkv',\n  'avi',\n  'ts',\n])\n\nexport function addMenuFile() {\n  const menu = Menu.getApplicationMenu()\n  if (menu !== null) {\n    menu.items.forEach((item) => {\n      if (item.label === 'File' && item.submenu !== undefined) {\n        item.submenu.insert(\n          0,\n          new MenuItem({\n            label: 'Open File (O)',\n            click: () => {\n              openFile()\n            },\n          }),\n        )\n        item.submenu.insert(1, new MenuItem({ type: 'separator' }))\n      }\n    })\n\n    Menu.setApplicationMenu(menu)\n  }\n}\n\n// Open file\nfunction openFile() {\n  const mainWindow = BrowserWindow.getAllWindows()[0]\n  const result = dialog.showOpenDialogSync({\n    title: 'Find ffmpeg binary',\n  })\n  if (result === undefined || result.length === 0) return\n  const path = result[0]\n  const pathParsed = path.replace(/\\\\/g, '/')\n  const extensionFile = pathParsed.split('/').pop()?.split('.').pop()\n  if (extensionFile !== undefined && allowedExtensions.has(extensionFile)) {\n    mainWindow.webContents.send('open-file', pathParsed)\n  } else {\n    mainWindow.webContents.send('open-file', 'Invalid file')\n  }\n}\n\nipcMain.on('open-file', (_event) => {\n  openFile()\n})\n",
  "electron/conversion/v1/convert.ts": "import path from 'path'\nimport { type ChildProcess, exec } from 'child_process'\nimport { getParseFFmpegPath } from '../../utils'\n\ninterface FileToConvertType {\n  videoName: string\n  filePath: string\n  cutStart: string\n  cutEnd: string\n  volume: string\n  format: string\n}\nfunction getTotalDuration(stderr: string) {\n  const totalDuration = stderr.match(/Duration: (\\d{2}:\\d{2}:\\d{2}.\\d{2})/)\n  if (totalDuration == null) return 0\n  const timeString = totalDuration[1]\n  const [hours, minutes, seconds] = timeString.split(':').map(parseFloat)\n  const timeInSeconds = hours * 3600 + minutes * 60 + seconds\n  return timeInSeconds\n}\n\nfunction parseProgress(stderr: string): number {\n  const timeMatch = stderr.match(/time=(\\d{2}:\\d{2}:\\d{2}.\\d{2})/)\n  if (timeMatch == null) return 0\n\n  const timeString = timeMatch[1]\n  const [hours, minutes, seconds] = timeString.split(':').map(parseFloat)\n  const timeInSeconds = hours * 3600 + minutes * 60 + seconds\n\n  return timeInSeconds\n}\n\nexport function convert(event: any, fileToConvert: FileToConvertType) {\n  const { videoName, filePath, cutStart, cutEnd, volume, format } =\n    fileToConvert\n  const ffmpegPath = getParseFFmpegPath()\n  let commandToExecute = `${ffmpegPath} -ss ${cutStart} `\n\n  if (cutEnd !== '00:00:00') {\n    commandToExecute += `-to ${cutEnd} `\n  }\n\n  commandToExecute += `-i \"${filePath}\" `\n\n  if (volume.length > 0) {\n    commandToExecute += `-filter:a \"volume=${volume}\" `\n  }\n\n  const filePathWithoutName = path.dirname(filePath)\n\n  if (format.length > 0) {\n    const baseName = path.basename(videoName, path.extname(videoName))\n    const outputFileName = `${baseName}-converted.${format}`\n    const newPath = path.join(filePathWithoutName, outputFileName)\n    commandToExecute += `\"${newPath}\"`\n  } else {\n    if (volume.length === 0) {\n      commandToExecute += '-c copy '\n    }\n    const baseName = path.basename(videoName, path.extname(videoName))\n    const extName = path.extname(videoName)\n    const newPath = path.join(\n      filePathWithoutName,\n      `${baseName}-converted${extName}`,\n    )\n    commandToExecute += `\"${newPath}\"`\n  }\n\n  commandToExecute += ' -y'\n  console.log(commandToExecute)\n  const ffmpegProcess = exec(commandToExecute)\n  let totalDuration = -1\n  ffmpegProcess.stderr?.on('data', (data) => {\n    let getDuration = -1\n    if (totalDuration === -1) {\n      getDuration = getTotalDuration(data)\n    }\n    if (getDuration > 0) {\n      totalDuration = getDuration\n    }\n    const progress = parseProgress(data)\n    let progressPercent = 0\n    if (totalDuration > 0 && progress > 0) {\n      progressPercent = Math.floor((progress / totalDuration) * 100)\n      event.sender.send('conversion-status', progressPercent)\n    }\n  })\n\n  ffmpegProcess.on('close', (code) => {\n    if (code === 0) {\n      event.sender.send('conversion-status', 'Completed')\n    } else {\n      event.sender.send('conversion-status', 'Conversion failed')\n    }\n  })\n\n  return ffmpegProcess\n}\n\nexport function cancelConversion(process: ChildProcess) {\n  if (process !== undefined && !process.killed) {\n    process.kill('SIGINT')\n  }\n}\n",
  "electron/conversion/v2/makeCommand.ts": "import { getParseFFmpegPath } from '../../utils'\nimport path from 'path'\n\ninterface FileToConvertType {\n  videoName: string\n  filePath: string\n  cutStart: string\n  cutEnd: string\n  volume: string\n  format: string\n}\n\nexport function makeFfmpegCommand(\n  _event: any,\n  fileToConvert: FileToConvertType,\n) {\n  const { videoName, filePath, cutStart, cutEnd, volume, format } =\n    fileToConvert\n  const ffmpegPath = getParseFFmpegPath()\n  let commandToExecute = `${ffmpegPath} -ss ${cutStart} `\n\n  if (cutEnd !== '00:00:00') {\n    commandToExecute += `-to ${cutEnd} `\n  }\n\n  commandToExecute += `-i \"${filePath}\" `\n\n  if (volume.length > 0) {\n    commandToExecute += `-filter:a \"volume=${volume}\" `\n  }\n\n  const filePathWithoutName = path.dirname(filePath)\n\n  if (format.length > 0) {\n    const baseName = path.basename(videoName, path.extname(videoName))\n    const outputFileName = `${baseName}-converted.${format}`\n    const newPath = path.join(filePathWithoutName, outputFileName)\n    commandToExecute += `\"${newPath}\"`\n  } else {\n    if (volume.length === 0) {\n      commandToExecute += '-c copy '\n    }\n    const baseName = path.basename(videoName, path.extname(videoName))\n    const extName = path.extname(videoName)\n    const newPath = path.join(\n      filePathWithoutName,\n      `${baseName}-converted${extName}`,\n    )\n    commandToExecute += `\"${newPath}\"`\n  }\n\n  commandToExecute += ' -y'\n  console.log(commandToExecute)\n  return commandToExecute\n}\n",
  "electron/conversion/v2/runShellCommand.js": "'use strict'\nconst { spawn } = require('child_process')\nconst shellQuote = require('shell-quote')\nlet isKilling = false\nlet countKilling = 0\nfunction runFFmpegCommand(commandToExecute) {\n  const parsed = shellQuote.parse(commandToExecute)\n  const command = parsed[0]\n  const args = parsed.slice(1)\n\n  const ffmpegProcess = spawn(command, args)\n\n  ffmpegProcess.stdout.on('data', (data) => {\n    process.send({ type: 'stdout', data: data.toString() })\n  })\n\n  ffmpegProcess.stderr.on('data', (data) => {\n    process.send({ type: 'stderr', data: data.toString() })\n  })\n\n  ffmpegProcess.on('error', (err) => {\n    process.send({ type: 'error', data: err.toString() })\n  })\n\n  ffmpegProcess.on('close', (code) => {\n    if (isKilling) {\n      isKilling = false\n      countKilling++\n      return\n    }\n    if (countKilling === 2) {\n      countKilling = 0\n      return\n    }\n\n    process.send({ type: 'close', code })\n  })\n\n  process.on('message', (message) => {\n    if (message === 'kill') {\n      ffmpegProcess.kill('SIGTERM')\n      isKilling = true\n      countKilling++\n    }\n  })\n}\n\nprocess.on('message', (command) => {\n  runFFmpegCommand(command)\n})\n",
  "electron/conversion/v2/utils.ts": "export function getTotalDuration(stderr: string) {\n  const totalDuration = stderr.match(/Duration: (\\d{2}:\\d{2}:\\d{2}.\\d{2})/)\n  if (totalDuration == null) return 0\n  const timeString = totalDuration[1]\n  const [hours, minutes, seconds] = timeString.split(':').map(parseFloat)\n  const timeInSeconds = hours * 3600 + minutes * 60 + seconds\n  return timeInSeconds\n}\n\nexport function parseProgress(stderr: string): number {\n  const timeMatch = stderr.match(/time=(\\d{2}:\\d{2}:\\d{2}.\\d{2})/)\n  if (timeMatch == null) return 0\n\n  const timeString = timeMatch[1]\n  const [hours, minutes, seconds] = timeString.split(':').map(parseFloat)\n  const timeInSeconds = hours * 3600 + minutes * 60 + seconds\n\n  return timeInSeconds\n}\n",
  "electron/electron-env.d.ts": "/// <reference types=\"vite-plugin-electron/electron-env\" />\n\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    /**\n     * The built directory structure\n     *\n     * ```tree\n     * ├─┬─┬ dist\n     * │ │ └── index.html\n     * │ │\n     * │ ├─┬ dist-electron\n     * │ │ ├── main.js\n     * │ │ └── preload.js\n     * │\n     * ```\n     */\n    DIST: string\n    /** /dist/ or /public/ */\n    VITE_PUBLIC: string\n  }\n}\n\n// Used in Renderer process, expose in `preload.ts`\ninterface Window {\n  ipcRenderer: import('electron').IpcRenderer\n}\n",
  "electron/entities/size.entity.ts": "export interface IPlayFactoryConfig {\n  x?: number\n  y?: number\n  width?: number\n  height?: number\n  ffmpegPath?: string\n}\n",
  "electron/entities/statusDownload.entity.ts": "export interface IStatusDownload {\n  message: string\n  percentage: number\n  totalLength: string\n  elapsedLength: string\n  completed: boolean\n  error: string\n}\n",
  "electron/main.ts": "import { app, BrowserWindow, dialog, ipcMain, Menu, MenuItem } from 'electron'\nimport path from 'node:path'\nimport fs from 'node:fs'\nimport log from 'electron-log'\nimport { type IPlayFactoryConfig } from './entities/size.entity'\nimport { addFFmpegMenu } from './components/menuFFmpeg'\nimport { currentPlayFactoryConfigs, playFactoryConfigsPath } from './utils'\nimport { addMenuFile } from './components/menuFile'\nimport { autoUpdater } from 'electron-updater'\n\n// v1\nimport { convert } from './conversion/v1/convert'\n\n// v2\n// import { makeFfmpegCommand } from './conversion/v2/makeCommand'\n// import { getTotalDuration, parseProgress } from './conversion/v2/utils'\n// import { type ChildProcess, fork } from 'node:child_process'\n\nautoUpdater.autoDownload = false\nautoUpdater.autoInstallOnAppQuit = true\n\n// The built directory structure\n//\n// ├─┬─┬ dist\n// │ │ └── index.html\n// │ │\n// │ ├─┬ dist-electron\n// │ │ ├── main.js\n// │ │ └── preload.js\n// │\nprocess.env.DIST = path.join(__dirname, '../dist')\nprocess.env.VITE_PUBLIC = app.isPackaged\n  ? process.env.DIST\n  : path.join(process.env.DIST, '../public')\n\nlet win: BrowserWindow | null\n// 🚧 Use ['ENV_NAME'] avoid vite:define plugin - Vite@2.x\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\n\nfunction createWindow() {\n  // Load the previous state to set the window position and size\n  let playFactoryConfigs: IPlayFactoryConfig = {}\n  try {\n    playFactoryConfigs = JSON.parse(\n      fs.readFileSync(playFactoryConfigsPath(), 'utf-8'),\n    )\n  } catch (err) {\n    playFactoryConfigs = { x: 0, y: 0, width: 800, height: 600 }\n  }\n\n  win = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    icon: path.join(process.env.VITE_PUBLIC, 'iconPlayFactory.png'),\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n      nodeIntegration: false,\n      contextIsolation: true,\n      webSecurity: false,\n    },\n    x: playFactoryConfigs.x,\n    y: playFactoryConfigs.y,\n  })\n  win.maximize()\n\n  // Test active push message to Renderer-process.\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  if (VITE_DEV_SERVER_URL != null) {\n    void win.loadURL(VITE_DEV_SERVER_URL)\n  } else {\n    // win.loadFile('dist/index.html')\n    void win.loadFile(path.join(process.env.DIST, 'index.html'))\n  }\n  win.on('close', (_event) => {\n    if (win !== null) {\n      const { x, y, width, height } = win.getBounds()\n      fs.writeFileSync(\n        playFactoryConfigsPath(),\n        JSON.stringify({ ...currentPlayFactoryConfigs(), x, y, width, height }),\n      )\n    }\n    win = null\n    app.quit()\n  })\n\n  // Update and add Menus\n  addFFmpegMenu()\n  addMenuFile()\n  addMenuHelp()\n}\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n    win = null\n  }\n})\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n\nvoid app.whenReady().then(createWindow)\n\nvoid app.whenReady().then(() => {\n  win?.on('enter-full-screen', () => {\n    win?.setMenuBarVisibility(false)\n  })\n\n  win?.on('leave-full-screen', () => {\n    win?.setMenuBarVisibility(true)\n  })\n})\n\nlog.info('Ready')\n\n// Conversion v1: Not possible cancel conversion\nipcMain.on('start-conversion', (event, requestData) => {\n  convert(event, requestData)\n})\n\n// Conversion v2: Possible cancel convercion, but just works in file \"win-unpacked\" using the installer file not works\n// let ffmpegProcess: ChildProcess\n// ipcMain.on('start-conversion', (event, requestData) => {\n//   event.sender.send('electron-debug', 'start-conversion')\n//   const command = makeFfmpegCommand(event, requestData)\n//   const modulePath = app.isPackaged\n//     ? path.join(process.resourcesPath, 'scripts/runShellCommand.js')\n//     : path.join(__dirname, '../electron/conversion/v2/runShellCommand.js')\n\n//   ffmpegProcess = fork(modulePath)\n//   ffmpegProcess.send(command)\n//   let totalDuration = -1\n//   ffmpegProcess.on('message', (message: any) => {\n//     if (message.type === 'stdout' || message.type === 'stderr') {\n//       let getDuration = -1\n//       if (totalDuration === -1) {\n//         getDuration = getTotalDuration(message.data)\n//       }\n//       if (getDuration > 0) {\n//         totalDuration = getDuration\n//       }\n//       const progress = parseProgress(message.data)\n//       let progressPercent = 0\n//       if (totalDuration > 0 && progress > 0) {\n//         progressPercent = Math.floor((progress / totalDuration) * 100)\n//         event.sender.send('conversion-status', progressPercent)\n//       }\n//     } else if (message.type === 'close') {\n//       if (message.code === 0) {\n//         event.sender.send('conversion-status', 'Completed')\n//       } else {\n//         event.sender.send('conversion-status', 'Conversion failed')\n//       }\n//       ffmpegProcess = undefined!\n//     }\n//   })\n// })\n\n// ipcMain.on('cancel-conversion', () => {\n//   if (ffmpegProcess !== undefined) {\n//     ffmpegProcess.send('kill')\n//   }\n// })\n// -------------------------------------------------------\n\nexport function addMenuHelp() {\n  const menu = Menu.getApplicationMenu()\n  if (menu !== null) {\n    menu.items.forEach((item) => {\n      if (item.label === 'Help' && item.submenu !== undefined) {\n        item.submenu.insert(\n          0,\n          new MenuItem({\n            label: 'Check for updates',\n            click: () => {\n              checkForUpdates()\n            },\n          }),\n        )\n      }\n    })\n\n    Menu.setApplicationMenu(menu)\n  }\n}\n\n// Check for updates\nfunction checkForUpdates() {\n  // Remove previous events\n  autoUpdater.removeAllListeners('update-available')\n  autoUpdater.removeAllListeners('update-not-available')\n  autoUpdater.removeAllListeners('update-downloaded')\n  autoUpdater.removeAllListeners('download-progress')\n\n  autoUpdater.on('update-available', () => {\n    void dialog\n      .showMessageBox({\n        type: 'info',\n        title: 'Update Available',\n        message: 'A new version is available. Do you want to update now?',\n        buttons: ['Update', 'Later'],\n        noLink: true,\n        cancelId: 1,\n      })\n      .then((result) => {\n        if (result.response === 0) {\n          autoUpdater.downloadUpdate().catch((error) => {\n            win?.webContents.send('debug', 'update-available: ' + error.message)\n          })\n        }\n      })\n  })\n\n  autoUpdater.on('update-not-available', () => {\n    void dialog.showMessageBox({\n      type: 'info',\n      title: 'No Updates',\n      message: 'Current version is up-to-date.',\n    })\n  })\n\n  autoUpdater.on('update-downloaded', () => {\n    void dialog\n      .showMessageBox({\n        type: 'info',\n        title: 'Update Ready',\n        message: 'Update downloaded, application will be quit for update...',\n      })\n      .then(() => {\n        autoUpdater.quitAndInstall()\n      })\n  })\n\n  autoUpdater.on('download-progress', (progressObj) => {\n    win?.webContents.send('update-download-progress', progressObj)\n  })\n\n  autoUpdater.on('error', (error) => {\n    win?.webContents.send('debug', 'error: ' + error.message)\n  })\n\n  autoUpdater.checkForUpdates().catch((error) => {\n    win?.webContents.send('debug', 'checkForUpdates: ' + error.message)\n  })\n}\n",
  "electron/preload.ts": "import { contextBridge, ipcRenderer } from 'electron'\n\n// --------- Expose some API to the Renderer process ---------\n// contextBridge.exposeInMainWorld('ipcRenderer', withPrototype(ipcRenderer))\ncontextBridge.exposeInMainWorld('electron', {\n  send: (channel: any, data: any) => {\n    ipcRenderer.send(channel, data)\n  },\n  sendEvent: (channel: any) => {\n    ipcRenderer.send(channel)\n  },\n  receive: (channel: any, func: any) => ipcRenderer.on(channel, func),\n  removeListener: (channel: any) => ipcRenderer.removeAllListeners(channel),\n})\n// `exposeInMainWorld` can't detect attributes and methods of `prototype`, manually patching it.\n// function withPrototype (obj: Record<string, any>) {\n//   const protos = Object.getPrototypeOf(obj)\n\n//   for (const [key, value] of Object.entries(protos)) {\n//     if (Object.prototype.hasOwnProperty.call(obj, key)) continue\n\n//     if (typeof value === 'function') {\n//       // Some native APIs, like `NodeJS.EventEmitter['on']`, don't work in the Renderer process. Wrapping them into a function.\n//       obj[key] = function (...args: any) {\n//         return value.call(obj, ...args)\n//       }\n//     } else {\n//       obj[key] = value\n//     }\n//   }\n//   return obj\n// }\n\n// --------- Preload scripts loading ---------\nasync function domReady(\n  condition: DocumentReadyState[] = ['complete', 'interactive'],\n) {\n  return await new Promise((resolve) => {\n    if (condition.includes(document.readyState)) {\n      resolve(true)\n    } else {\n      document.addEventListener('readystatechange', () => {\n        if (condition.includes(document.readyState)) {\n          resolve(true)\n        }\n      })\n    }\n  })\n}\n\nconst safeDOM = {\n  append(parent: HTMLElement, child: HTMLElement) {\n    if (Array.from(parent.children).find((e) => e === child) == null) {\n      parent.appendChild(child)\n    }\n  },\n  remove(parent: HTMLElement, child: HTMLElement) {\n    if (Array.from(parent.children).find((e) => e === child) != null) {\n      parent.removeChild(child)\n    }\n  },\n}\n\n/**\n * https://tobiasahlin.com/spinkit\n * https://connoratherton.com/loaders\n * https://projects.lukehaas.me/css-loaders\n * https://matejkustec.github.io/SpinThatShit\n */\nfunction useLoading() {\n  const className = 'loaders-css__square-spin'\n  const styleContent = `\n@keyframes square-spin {\n  25% { transform: perspective(100px) rotateX(180deg) rotateY(0); }\n  50% { transform: perspective(100px) rotateX(180deg) rotateY(180deg); }\n  75% { transform: perspective(100px) rotateX(0) rotateY(180deg); }\n  100% { transform: perspective(100px) rotateX(0) rotateY(0); }\n}\n.${className} > div {\n  animation-fill-mode: both;\n  width: 50px;\n  height: 50px;\n  background: #fff;\n  animation: square-spin 3s 0s cubic-bezier(0.09, 0.57, 0.49, 0.9) infinite;\n}\n.app-loading-wrap {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #282c34;\n  z-index: 9;\n}\n    `\n  const oStyle = document.createElement('style')\n  const oDiv = document.createElement('div')\n\n  oStyle.id = 'app-loading-style'\n  oStyle.innerHTML = styleContent\n  oDiv.className = 'app-loading-wrap'\n  oDiv.innerHTML = `<div class=\"${className}\"><div></div></div>`\n\n  return {\n    appendLoading() {\n      safeDOM.append(document.head, oStyle)\n      safeDOM.append(document.body, oDiv)\n    },\n    removeLoading() {\n      safeDOM.remove(document.head, oStyle)\n      safeDOM.remove(document.body, oDiv)\n    },\n  }\n}\n\n// ----------------------------------------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/unbound-method, react-hooks/rules-of-hooks\nconst { appendLoading, removeLoading } = useLoading()\nvoid domReady().then(appendLoading)\n\nwindow.onmessage = (ev) => {\n  ev.data.payload === 'removeLoading' && removeLoading()\n}\n\nsetTimeout(removeLoading, 4999)\n",
  "electron/releases.constants.ts": "// https://github.com/browserslist/update-db#readme\n// https://evermeet.cx/pub/ffmpeg/\n// https://evermeet.cx/ffmpeg/#api-download\n// https://evermeet.cx/ffmpeg/get/zip\nimport { checkSO } from './utils'\n\nconst os = checkSO()\nexport const releaseFFmpegName =\n  os === 'win'\n    ? 'ffmpeg-n7.0-latest-win64-lgpl-7.0'\n    : os === 'mac'\n      ? 'ffmpeg'\n      : 'ffmpeg-n7.0-latest-linux64-lgpl-7.0'\nexport const urlFFmpegToDownload =\n  os === 'win'\n    ? `https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/${releaseFFmpegName}.zip`\n    : os === 'mac'\n      ? 'https://evermeet.cx/ffmpeg/get/zip'\n      : `https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/${releaseFFmpegName}.tar.xz`\n\nexport const ffmpegFileExtension = os === 'win' || 'mac' ? 'ffmpeg.zip' : 'ffmpeg.tar.xz'\n",
  "electron/utils.ts": "import path from 'node:path'\nimport { app } from 'electron'\nimport fs from 'node:fs'\nimport { type IPlayFactoryConfig } from './entities/size.entity'\n\nexport const playFactoryConfigsPath = (): string => {\n  const configPath = path.join(app.getPath('home'), '.play-factory-config.json')\n\n  if (!fs.existsSync(configPath)) {\n    fs.writeFileSync(configPath, JSON.stringify({}), 'utf-8')\n  }\n  return configPath\n}\n\nexport function currentPlayFactoryConfigs(): IPlayFactoryConfig {\n  return JSON.parse(fs.readFileSync(playFactoryConfigsPath(), 'utf-8'))\n}\n\nexport function getParseFFmpegPath(): string {\n  const ffmpegPath = currentPlayFactoryConfigs().ffmpegPath\n  if (ffmpegPath !== undefined) {\n    return ffmpegPath.replace(/\\\\/g, '/')\n  }\n  return 'ffmpeg'\n}\n\nexport function formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return '0 Bytes'\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n}\n\nexport function checkSO() {\n  const so = process.platform\n  if (so === 'win32') {\n    return 'win'\n  } else if (so === 'darwin') {\n    return 'mac'\n  } else {\n    return 'linux'\n  }\n}\n",
  "electron-builder.json5": "/**\n * @see https://www.electron.build/configuration/configuration\n */\n{\n  \"$schema\": \"https://raw.githubusercontent.com/electron-userland/electron-builder/master/packages/app-builder-lib/scheme.json\",\n  \"appId\": \"com.edev.playfactory\",\n  \"asar\": true,\n  \"productName\": \"Play-Factory\",\n  \"directories\": {\n    \"output\": \"release/${version}\"\n  },\n  \"files\": [\n    \"dist\",\n    \"dist-electron\"\n  ],\n  \"extraResources\": [\n    {\n      \"from\": \"electron/conversion/v2/runShellCommand.js\",\n      \"to\": \"scripts/runShellCommand.js\"\n    }\n  ],\n  \"mac\": {\n    \"icon\": \"dist/iconPlayFactory.icns\",\n    \"target\": [\n      \"dmg\"\n    ],\n    \"artifactName\": \"${productName}-Mac-${version}-universal.${ext}\"\n  },\n  \"win\": {\n    \"icon\": \"dist/iconPlayFactory.png\",\n    \"target\": [\n      {\n        \"target\": \"nsis\",\n        \"arch\": [\n          \"x64\"\n        ]\n      }\n    ],\n    \"artifactName\": \"${productName}-Windows-${version}.${ext}\"\n  },\n  \"nsis\": {\n    \"oneClick\": false,\n    \"perMachine\": false,\n    \"allowElevation\": true,\n    \"allowToChangeInstallationDirectory\": true,\n    \"deleteAppDataOnUninstall\": false,\n    \"createDesktopShortcut\": true,\n    \"createStartMenuShortcut\": true\n  },\n  \"linux\": {\n    \"icon\": \"dist/icons\",\n    \"target\": [\n      \"deb\"\n    ],\n    \"category\": \"Utility\",\n    \"artifactName\": \"${productName}-Linux-${version}.${ext}\"\n  }\n}\n",
  "index.html": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/iconPlayFactory.webp\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>eDev Play Factory - v0.0.9</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n",
  "package.json": "{\n  \"name\": \"play-factory\",\n  \"private\": false,\n  \"version\": \"0.0.9\",\n  \"description\": \"A simple electron app to convert files using ffmpeg\",\n  \"author\": {\n    \"name\": \"Edson Añawaya Rios\",\n    \"email\": \"edsonrios9@gmail.com\"\n  },\n  \"license\": \"MIT\",\n  \"repository\": \"https://github.com/edsonarios/play-factory-dev\",\n  \"publish:\": {\n    \"provider\": \"github\",\n    \"releaseType\": \"release\"\n  },\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build && electron-builder\",\n    \"lint\": \"eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@headlessui/react\": \"^1.7.17\",\n    \"@heroicons/react\": \"^2.0.18\",\n    \"@types/node\": \"^20.12.12\",\n    \"adm-zip\": \"^0.5.12\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"axios\": \"^1.7.2\",\n    \"electron-log\": \"^5.0.1\",\n    \"electron-updater\": \"^6.1.7\",\n    \"plyr-react\": \"^5.3.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"shell-quote\": \"^1.8.1\",\n    \"vite-tsconfig-paths\": \"^4.2.1\",\n    \"zustand\": \"^4.5.2\"\n  },\n  \"devDependencies\": {\n    \"@types/adm-zip\": \"^0.5.5\",\n    \"@types/react\": \"^18.2.21\",\n    \"@types/react-dom\": \"^18.2.7\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.12.0\",\n    \"@typescript-eslint/parser\": \"^6.6.0\",\n    \"@vitejs/plugin-react\": \"^4.0.4\",\n    \"electron\": \"^26.1.0\",\n    \"electron-builder\": \"^24.6.4\",\n    \"eslint\": \"^8.54.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-config-standard-with-typescript\": \"^40.0.0\",\n    \"eslint-plugin-import\": \"^2.29.0\",\n    \"eslint-plugin-n\": \"^16.3.1\",\n    \"eslint-plugin-prettier\": \"^5.1.3\",\n    \"eslint-plugin-promise\": \"^6.1.1\",\n    \"eslint-plugin-react\": \"^7.33.2\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.3\",\n    \"prettier\": \"^3.2.5\",\n    \"tailwindcss\": \"^3.3.5\",\n    \"typescript\": \"^5.3.2\",\n    \"vite\": \"^4.4.9\",\n    \"vite-plugin-electron\": \"^0.14.0\",\n    \"vite-plugin-electron-renderer\": \"^0.14.5\"\n  },\n  \"main\": \"dist-electron/main.js\"\n}\n",
  "postcss.config.js": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
  "README.md": "[![eDev](/public/eDevFactory.webp)](https://play-factory.edevv.dev/)\n\n![](/public/heroShoot.webp)\n\n[LinkedIn](https://www.linkedin.com/in/edson-a%C3%B1awaya/)\n\nDownload the latest release [here](https://github.com/edsonarios/play-factory-dev/releases)\n\n## Acknowledgements\n\n`eDev - Play Factory` icon designed by `Fabiola Torrez`\n\n## Use App\n\n```bash\ngit clone ...\nnpm install\nnpm run dev\n\n# build\nnpm run build\n```\n\n## Know Issues\n### Issue: Unable to Cancel Conversion Process in Release Version\nCurrently, it is not possible to cancel the conversion process in the standard release version of the application.\n\n### Alternative Version with Cancellation Feature\nThere is an alternative version available that allows you to cancel a conversion process. However, this version is not easily distributable.\n\nUsing the Alternative Version (Windows Only)\n1. Download the Alternative Version: Go to the Releases section of the repository and download the alternative version.\n2. Extract the Files: Once downloaded, extract the files. This version works similarly to a portable application.\n\n### Building Your Own Alternative Version\nIf you prefer to create your own alternative version, follow these steps:\n\n1. Download the Project: Clone or download the entire project from the repository.\n2. Modify the Code:\n* Open `electron/main.ts`.\n* Uncomment the code on lines 14 and 132, and comment out the code for version 1. This will switch the application to use version 2, which supports cancelling conversions.\n3. Build the Application:\n* Run the build command: `npm run build`.\n* After the build process completes, you will find a folder named win-unpacked in the output directory `/release/\"currectVersion e.g.(1.0.0)\"`. This folder contains the application, ready to use without installation.\n* This version allows you to cancel the conversion process if needed.\n\nBy following these steps, you can either use the pre-built alternative version or create your own, ensuring you have the ability to cancel conversions when necessary.\n",
  "src/App.css": ".headerButton{\n  @apply text-base w-full rounded-md py-1 font-medium text-gray-700;\n}",
  "src/App.tsx": "import './App.css'\nimport IndexComponent from './components/index'\n\nfunction App() {\n  return <IndexComponent />\n}\n\nexport default App\n",
  "src/common/utils.ts": "export function formatTime(seconds: number) {\n  const roundedSeconds = Math.round(seconds)\n  const hours = Math.floor(roundedSeconds / 3600)\n  const minutes = Math.floor((roundedSeconds % 3600) / 60)\n  const remainingSeconds = roundedSeconds % 60\n\n  const padWithZero = (number: number) => {\n    const string = number.toString()\n    if (number < 10) {\n      return '0' + string\n    }\n    return string\n  }\n\n  return `${padWithZero(hours)}:${padWithZero(minutes)}:${padWithZero(remainingSeconds)}`\n}\n\nexport const validateNotEmptyField = (value: string) => {\n  if (value === '') return 'File path is required.'\n  return ''\n}\n\nexport const validateTimeFormat = (value: string) => {\n  if (value.match(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/) == null) {\n    return 'Invalid time format.'\n  }\n  return ''\n}\n\ninterface RequestData {\n  videoName: string\n  filePath: string\n  cutStart: string\n  cutEnd: string\n  volume: string\n  format: string\n}\n\nexport function validateDatas(requestDatas: RequestData) {\n  if (validateNotEmptyField(requestDatas.videoName) !== '') {\n    return 'Not Found videoName'\n  }\n  if (validateNotEmptyField(requestDatas.filePath) !== '') {\n    return 'Not Found filePath'\n  }\n  if (validateTimeFormat(requestDatas.cutStart) !== '') {\n    return 'Invalid Format Time Start'\n  }\n  if (validateTimeFormat(requestDatas.cutEnd) !== '') {\n    return 'Invalid Format Time End'\n  }\n  const cutStartSeconds = timeToSeconds(requestDatas.cutStart)\n  const cutEndSeconds = timeToSeconds(requestDatas.cutEnd)\n  if (\n    requestDatas.cutStart === '00:00:00' &&\n    requestDatas.cutEnd === '00:00:00'\n  ) {\n    return ''\n  }\n  if (cutEndSeconds <= cutStartSeconds) {\n    return 'The end time must be greater than the start time.'\n  }\n  return ''\n}\n\nconst timeToSeconds = (time: string) => {\n  const [hours, minutes, seconds] = time.split(':').map(Number)\n  return hours * 3600 + minutes * 60 + seconds\n}\n",
  "src/components/configurationPanel/button.tsx": "interface ButtonComponentProps {\n  label: string\n  onClick?: () => void\n  type?: 'submit' | 'button' | 'reset' | undefined\n  style?: string\n}\n\nexport default function ButtonComponent({\n  label,\n  onClick,\n  type,\n  style = 'py-2 text-base',\n}: ButtonComponentProps) {\n  return (\n    <button\n      onClick={onClick}\n      type={type}\n      className={`bg-plyrColor hover:bg-blue-500 text-white font-bold w-24 rounded-md ${style} `}\n    >\n      {label}\n    </button>\n  )\n}\n",
  "src/components/configurationPanel/configurationsIndex.tsx": "import { validateNotEmptyField, validateTimeFormat } from '@/common/utils'\nimport DropDownComponent from './dropDown'\nimport InputComponent from './input'\nimport ButtonComponent from '@/components/configurationPanel/button'\nimport { type FFmpegStoreType, useFFmpegStore } from '@/store/ffmpegStore'\ninterface Options {\n  name: string\n  value: string\n}\ninterface ConfigurationComponentProps {\n  filePath: string\n  setFilePath: React.Dispatch<React.SetStateAction<string>>\n  cutStart: string\n  setCutStart: React.Dispatch<React.SetStateAction<string>>\n  cutEnd: string\n  setCutEnd: React.Dispatch<React.SetStateAction<string>>\n  volume: Options\n  setVolume: React.Dispatch<React.SetStateAction<Options>>\n  format: Options\n  setFormat: React.Dispatch<React.SetStateAction<Options>>\n  handleConvert: (event: any) => void\n}\n\nconst volumeOptions: Options[] = [\n  { name: '5 Volume', value: '5' },\n  { name: '4 Volume', value: '4' },\n  { name: '3 Volume', value: '3' },\n  { name: '2 Volume', value: '2' },\n  { name: '0.5 Volume', value: '0.5' },\n  { name: 'Not Change', value: '' },\n]\n\nconst formatOptions: Options[] = [\n  { name: 'Mp3', value: 'mp3' },\n  { name: 'Wav', value: 'wav' },\n  { name: 'Ts', value: 'ts' },\n  { name: 'MKV', value: 'mkv' },\n  { name: 'Flv', value: 'flv' },\n  { name: 'Mp4', value: 'mp4' },\n  { name: 'Not Change', value: '' },\n]\n\nexport default function ConfigurationComponent({\n  filePath,\n  setFilePath,\n  cutStart,\n  setCutStart,\n  cutEnd,\n  setCutEnd,\n  volume,\n  setVolume,\n  format,\n  setFormat,\n  handleConvert,\n}: ConfigurationComponentProps) {\n  const { isFFmpegInstalled } = useFFmpegStore<FFmpegStoreType>(\n    (state) => state,\n  )\n\n  return (\n    <div className=\"pt-4\">\n      <h3 id=\"additionalTId\" className=\"text-lg border-t-2 border-zinc-700\">\n        Configurations:\n      </h3>\n      <form className=\"flex flex-row gap-x-2 mt-2\" onSubmit={handleConvert}>\n        <div className=\"flex flex-row gap-x-4\">\n          <div className=\"flex flex-row gap-x-4 flex-wrap\">\n            <InputComponent\n              label=\"File Path\"\n              value={filePath}\n              onChange={(event: any) => {\n                setFilePath(event.target.value)\n              }}\n              validate={validateNotEmptyField}\n              required={true}\n            />\n            <InputComponent\n              label=\"Cut Init\"\n              value={cutStart}\n              onChange={(event: any) => {\n                setCutStart(event.target.value)\n              }}\n              validate={validateTimeFormat}\n              required={true}\n              placeholder=\"HH:MM:SS\"\n            />\n            <InputComponent\n              label=\"Cut Finish\"\n              value={cutEnd}\n              onChange={(event: any) => {\n                setCutEnd(event.target.value)\n              }}\n              validate={validateTimeFormat}\n              required={true}\n              placeholder=\"HH:MM:SS\"\n            />\n            <DropDownComponent\n              label=\"Volume\"\n              value={volume}\n              setValue={setVolume}\n              options={volumeOptions}\n            />\n            <DropDownComponent\n              label=\"Format\"\n              value={format}\n              setValue={setFormat}\n              options={formatOptions}\n            />\n          </div>\n          <div className=\"flex items-start pl-4\">\n            {isFFmpegInstalled ? (\n              <ButtonComponent\n                label=\"Convert\"\n                type=\"submit\"\n                // style=\"py-4 text-lg\"\n                style=\"py-4 text-lg\"\n              />\n            ) : (\n              <ButtonComponent\n                label=\"Check FFmpeg\"\n                type=\"button\"\n                style=\"py-4 text-sm w-28 bg-yellow-500 hover:bg-yellow-700\"\n                onClick={() => {\n                  window.electron.sendEvent('check-ffmpeg')\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n",
  "src/components/configurationPanel/drop-down.tsx": "import { Fragment } from 'react'\nimport { Listbox, Transition } from '@headlessui/react'\nimport { CheckIcon, ChevronUpDownIcon } from '@heroicons/react/20/solid'\n\ninterface Options {\n  name: string\n  value: string\n}\ninterface DropDownComponentProps {\n  label: string\n  value: Options\n  setValue: React.Dispatch<React.SetStateAction<Options>>\n  options: Options[]\n}\n\nexport default function DropDownComponent2({\n  label,\n  value,\n  setValue,\n  options,\n}: DropDownComponentProps) {\n  return (\n    <div className=\"w-60\">\n      <label className=\"text-sm font-semibold\">{label}</label>\n      <Listbox value={value} onChange={setValue}>\n        <div className=\"relative mt-1\">\n          <Listbox.Button className=\"relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm\">\n            <span className=\"block truncate text-gray-700\">{value.name}</span>\n            <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n              <ChevronUpDownIcon\n                className=\"h-5 w-5 text-gray-700\"\n                aria-hidden=\"true\"\n              />\n            </span>\n          </Listbox.Button>\n          <Transition\n            as={Fragment}\n            leave=\"transition ease-in duration-100\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Listbox.Options className=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm\">\n              {options.map((person, personIdx) => (\n                <Listbox.Option\n                  key={personIdx}\n                  className={({ active }) =>\n                    `relative cursor-default select-none py-2 pl-10 pr-4 ${\n                      active ? 'bg-green-100 text-green-900' : 'text-gray-900'\n                    }`\n                  }\n                  value={person}\n                >\n                  {({ selected }) => (\n                    <>\n                      <span\n                        className={`block truncate ${\n                          selected ? 'font-medium' : 'font-normal'\n                        }`}\n                      >\n                        {person.name}\n                      </span>\n                      {selected ? (\n                        <span className=\"absolute inset-y-0 left-0 flex items-center pl-3 text-green-700\">\n                          <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                        </span>\n                      ) : null}\n                    </>\n                  )}\n                </Listbox.Option>\n              ))}\n            </Listbox.Options>\n          </Transition>\n        </div>\n      </Listbox>\n    </div>\n  )\n}\n",
  "src/components/configurationPanel/dropDown.tsx": "import { useState } from 'react'\nimport { ChevronUpDownIcon } from '@heroicons/react/20/solid'\n\ninterface Options {\n  name: string\n  value: string\n}\ninterface DropDownComponentProps {\n  label: string\n  value: Options\n  setValue: React.Dispatch<React.SetStateAction<Options>>\n  options: Options[]\n}\n\nexport default function DropDownComponent({\n  label,\n  value,\n  setValue,\n  options,\n}: DropDownComponentProps) {\n  const [showOptions, setShowOptions] = useState(false)\n  return (\n    <div className=\"relative inline-block -top-1.5 w-32\">\n      <label className=\"text-sm font-semibold\">{label}</label>\n      <button\n        className=\"relative w-full cursor-default rounded-lg bg-white py-3 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm\"\n        onClick={(event) => {\n          event.preventDefault()\n          setShowOptions(!showOptions)\n        }}\n      >\n        <span className=\"block truncate text-gray-700\">{value.name}</span>\n        <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n          <ChevronUpDownIcon\n            className=\"h-5 w-5 text-gray-700\"\n            aria-hidden=\"true\"\n          />\n        </span>\n      </button>\n\n      {showOptions && (\n        <div className=\"absolute bottom-full w-full bg-white border border-gray-300 rounded shadow-lg transform -translate-x-1/2 left-1/2 text-slate-900 opacity-90\">\n          {options.map((option) => (\n            <div\n              key={option.name}\n              className=\"px-4 py-2 hover:bg-[#afe5fc] hover:text-blue-400 cursor-pointer\"\n              onClick={() => {\n                setValue(option)\n                setShowOptions(false)\n              }}\n            >\n              {option.name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/configurationPanel/input.tsx": "import { useEffect, useState } from 'react'\n\ninterface InputComponentProps {\n  label: string\n  value: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  validate?: (value: string) => string\n  required?: boolean\n  placeholder?: string\n}\n\nexport default function InputComponent({\n  label,\n  value,\n  onChange,\n  validate,\n  required,\n  placeholder = '',\n}: InputComponentProps) {\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    if (validate !== undefined) {\n      const messageError = validate(value)\n      setError(messageError)\n    }\n  }, [value, validate])\n  return (\n    <div className=\"flex flex-col w-32\">\n      <label className=\"text-sm font-semibold \">{label}</label>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={`px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring focus:ring-blue-500 focus:border-plyrColor text-gray-700\n        ${error !== '' ? 'border-red-400 focus:ring-red-400 focus:border-red-400' : ''}`}\n        required={required}\n        placeholder={placeholder}\n      />\n\n      {error !== undefined && <p className=\"text-red-400 text-xs\">{error}</p>}\n    </div>\n  )\n}\n",
  "src/components/index.tsx": "import { useState, useRef, useMemo, useEffect } from 'react'\nimport Plyr, { type APITypes, type PlyrOptions } from 'plyr-react'\nimport ConfigurationComponent from './configurationPanel/configurationsIndex'\nimport ButtonComponent from './configurationPanel/button'\nimport { formatTime, validateDatas } from '@/common/utils'\nimport { Title } from './title'\nimport { Ply } from './player/player'\nimport { TabHeader } from './player/tabHeader'\nimport StatusConversion from './modalStatusConversion/statusConversion'\nimport StatusFFmpeg from './modalFFmpeg/statusFFmpeg'\nimport StatusDownload from './modalFFmpeg/statusDownload'\nimport { OpenFile } from './openFile'\nimport ModalUpdateStatus from './modals/ModalUpdateStatus'\n\ninterface ElectronAPI {\n  send: (channel: string, data: any) => void\n  sendEvent: (channel: string) => void\n  receive: (channel: string, func: (event: any, ...args: any[]) => void) => void\n  removeListener: (channel: string, func: (...args: any[]) => void) => void\n}\n\ndeclare global {\n  interface Window {\n    electron: ElectronAPI\n  }\n}\n\ninterface Options {\n  name: string\n  value: string\n}\n\nexport default function IndexComponent() {\n  const playerRef = useRef<APITypes>(null)\n  const playerSecondRef = useRef<APITypes>(null)\n  const [videoName, setVideoName] = useState<string>('')\n  const [videoSrc, setVideoSrc] = useState<string>('')\n  const [videoSecondSrc, setVideoSecondSrc] = useState<string>('')\n  const [cutStart, setCutStart] = useState<string>('00:00:00')\n  const [cutEnd, setCutEnd] = useState<string>('00:00:00')\n  const [volume, setVolume] = useState<Options>({\n    name: 'Not Change',\n    value: '',\n  })\n  const [format, setFormat] = useState<Options>({\n    name: 'Not Change',\n    value: '',\n  })\n  const [filePath, setFilePath] = useState<string>(' ')\n\n  const plyrOptions: PlyrOptions = {\n    loop: { active: true },\n    autoplay: true,\n    hideControls: false,\n    keyboard: {\n      global: true,\n    },\n  }\n  const plyrSecondOptions: PlyrOptions = {\n    loop: { active: true },\n    autoplay: true,\n    hideControls: false,\n    keyboard: {\n      global: false,\n    },\n  }\n\n  const handleStartCut = () => {\n    if (playerRef?.current !== null) {\n      const currenTime = playerRef.current.plyr.currentTime\n      setCutStart(formatTime(currenTime))\n    }\n  }\n\n  const handleEndCut = () => {\n    if (playerRef?.current !== null) {\n      const currenTime = playerRef.current.plyr.currentTime\n      setCutEnd(formatTime(currenTime))\n    }\n  }\n\n  const jumpToSecond = (seconds: number | null) => {\n    if (playerRef?.current !== null && seconds !== null) {\n      const player = playerRef.current.plyr\n      player.currentTime = seconds\n    }\n  }\n\n  const jumpSecondToSecond = (seconds: number | null) => {\n    if (playerSecondRef?.current !== null && seconds !== null) {\n      const player = playerSecondRef.current.plyr\n      player.currentTime = seconds\n    }\n  }\n\n  const plyrComponent = useMemo(\n    () => (\n      <Plyr\n        ref={playerRef}\n        source={{\n          type: 'video',\n          sources: [\n            {\n              src: videoSrc,\n              provider: 'html5',\n            },\n          ],\n        }}\n        options={plyrOptions}\n      />\n    ),\n    [playerRef, videoSrc],\n  )\n\n  const plyrSecondComponent = useMemo(\n    () => (\n      <Plyr\n        ref={playerSecondRef}\n        source={{\n          type: 'video',\n          sources: [\n            {\n              src: videoSecondSrc,\n              provider: 'html5',\n            },\n          ],\n        }}\n        options={plyrSecondOptions}\n      />\n    ),\n    [playerSecondRef, videoSecondSrc],\n  )\n\n  const handleDragOver = (event: any) => {\n    event.preventDefault()\n  }\n\n  const handleDropElectron = (event: any) => {\n    event.preventDefault()\n    // Use DataTransferItemList interface to access the file(s)\n    if (event.dataTransfer.items !== undefined) {\n      if (\n        event.dataTransfer.items.length > 0 &&\n        event.dataTransfer.items[0].kind === 'file'\n      ) {\n        const file = event.dataTransfer.items[0].getAsFile()\n        const url = URL.createObjectURL(file)\n        setCutEnd('00:00:00')\n        setCutStart('00:00:00')\n        setVolume({ name: 'None', value: '' })\n        setFormat({ name: 'None', value: '' })\n        setVideoName(file.name)\n        setVideoSrc(url)\n        setFilePath(file.path)\n      }\n    }\n  }\n\n  const handleSecondDrop = (event: any) => {\n    event.preventDefault()\n    const files = event.dataTransfer.files\n\n    if (Boolean(files) && files.length > 0) {\n      const file = files[0]\n      const url = URL.createObjectURL(file)\n      setVideoSecondSrc(url)\n    }\n  }\n\n  const handleConvert = (event: any) => {\n    event.preventDefault()\n    const requestData = {\n      videoName,\n      filePath,\n      cutStart,\n      cutEnd,\n      volume: volume.value,\n      format: format.value,\n    }\n    const validDatas = validateDatas(requestData)\n    if (validDatas !== '') {\n      alert(`Error ${validDatas}`)\n      return\n    }\n    window.electron.send('start-conversion', requestData)\n  }\n\n  const [selectTab, setSelectTab] = useState(0)\n  // resize player\n  const appContainerRef = useRef<HTMLDivElement>(null)\n  const updatePlayerSize = () => {\n    if (appContainerRef.current !== null) {\n      const titlePlace = document.getElementById('titleId')\n      const configPlace = document.getElementById('configurationId')\n      const additionalTPlace = document.getElementById('additionalTId')\n      const additionalCPlace = document.getElementById('additionalCId')\n      const tabsPlace = document.getElementById('tabsId')\n      const playerWrapper: NodeListOf<HTMLElement> = document.querySelectorAll(\n        '.plyr__video-wrapper',\n      )\n      if (\n        playerWrapper !== null &&\n        titlePlace !== null &&\n        configPlace !== null &&\n        additionalCPlace !== null &&\n        tabsPlace !== null &&\n        additionalTPlace !== null\n      ) {\n        const appWidth = appContainerRef.current.offsetWidth\n        let appHeight\n        let aspectRatio\n        if (selectTab === 0) {\n          aspectRatio = 16 / 9\n          appHeight =\n            appContainerRef.current.offsetHeight -\n            (titlePlace.offsetHeight +\n              configPlace.offsetHeight +\n              additionalCPlace.offsetHeight +\n              tabsPlace.offsetHeight +\n              additionalTPlace.offsetHeight)\n        } else {\n          aspectRatio = 16 / 8\n          appHeight = appContainerRef.current.offsetHeight\n        }\n\n        let playerHeight = appHeight\n        let playerWidth = +(appHeight * aspectRatio).toFixed(0)\n\n        if (playerWidth > appWidth) {\n          playerWidth = appWidth\n          playerHeight = +(appWidth / aspectRatio).toFixed(0)\n        }\n\n        if (playerHeight > appHeight) {\n          playerHeight = appHeight\n          playerWidth = +(playerHeight * aspectRatio).toFixed(0)\n        }\n        if (selectTab === 0) {\n          playerWrapper.forEach((element) => {\n            element.style.maxWidth = `${playerWidth}px`\n            element.style.minWidth = `${playerWidth}px`\n            element.style.maxHeight = `${playerHeight}px`\n            element.style.minHeight = `${playerHeight}px`\n          })\n        }\n        if (selectTab === 1) {\n          const doublePlayerWidth = playerWidth / 2\n          const doublePlayerHeight = playerHeight / 2\n          playerWrapper.forEach((element) => {\n            element.style.maxWidth = `${doublePlayerWidth}px`\n            element.style.minWidth = `${doublePlayerWidth}px`\n            element.style.maxHeight = `${doublePlayerHeight}px`\n            element.style.minHeight = `${doublePlayerHeight}px`\n          })\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    updatePlayerSize()\n    window.addEventListener('resize', updatePlayerSize)\n    return () => {\n      window.removeEventListener('resize', updatePlayerSize)\n    }\n  }, [selectTab, videoSrc, videoSecondSrc])\n\n  // Event full screen\n  useEffect(() => {\n    const handleFullScreen = (event: any) => {\n      if (event.target !== undefined) {\n        // const playerWrapper = document.querySelector(\n        //   '.plyr__video-wrapper',\n        // ) as HTMLElement\n        const playerWrapper: NodeListOf<HTMLElement> =\n          document.querySelectorAll('.plyr__video-wrapper')\n        if (playerWrapper !== null) {\n          playerWrapper.forEach((element) => {\n            element.style.maxWidth = 'none'\n            element.style.minWidth = 'none'\n            element.style.maxHeight = 'none'\n            element.style.minHeight = 'none'\n          })\n        }\n      }\n    }\n    window.addEventListener('enterfullscreen', handleFullScreen)\n\n    return () => {\n      window.removeEventListener('enterfullscreen', handleFullScreen)\n    }\n  }, [])\n\n  return (\n    <div\n      ref={appContainerRef}\n      className=\"flex flex-col items-center justify-start h-screen mx-4 \"\n    >\n      <Title />\n      <div className=\"flex flex-col justify-center items-center\">\n        <div id=\"tabsId\" className=\"flex flex-row min-w-[500px]\">\n          <TabHeader\n            label=\"Single Player\"\n            selectTab={0}\n            currentTab={selectTab}\n            setSelectTab={setSelectTab}\n          />\n          <TabHeader\n            label=\"Double Player\"\n            selectTab={1}\n            currentTab={selectTab}\n            setSelectTab={setSelectTab}\n          />\n        </div>\n        {selectTab === 0 ? (\n          <div className=\"\">\n            <Ply\n              idPlayer=\"player1\"\n              plyrComponent={plyrComponent}\n              onDragOver={handleDragOver}\n              onDrop={handleDropElectron}\n              playerRef={playerRef}\n              jumpToSecond={jumpToSecond}\n            >\n              <ButtonComponent label=\"Cut Init\" onClick={handleStartCut} />\n              <ButtonComponent label=\"Cut End\" onClick={handleEndCut} />\n            </Ply>\n          </div>\n        ) : (\n          <div\n            id=\"doublePlayer\"\n            className=\"player-wrapper flex flex-row justify-between\"\n          >\n            <Ply\n              idPlayer=\"player1\"\n              plyrComponent={plyrComponent}\n              onDragOver={handleDragOver}\n              onDrop={handleDropElectron}\n              playerRef={playerRef}\n              jumpToSecond={jumpToSecond}\n            >\n              <ButtonComponent label=\"Cut Init\" onClick={handleStartCut} />\n              <ButtonComponent label=\"Cut End\" onClick={handleEndCut} />\n            </Ply>\n            <Ply\n              idPlayer=\"player2\"\n              plyrComponent={plyrSecondComponent}\n              onDragOver={handleDragOver}\n              onDrop={handleSecondDrop}\n              playerRef={playerSecondRef}\n              jumpToSecond={jumpSecondToSecond}\n            />\n          </div>\n        )}\n\n        {/* Configurations */}\n        <div id=\"configurationId\" className=\"w-full\">\n          <ConfigurationComponent\n            filePath={filePath}\n            setFilePath={setFilePath}\n            cutStart={cutStart}\n            setCutStart={setCutStart}\n            cutEnd={cutEnd}\n            setCutEnd={setCutEnd}\n            handleConvert={handleConvert}\n            volume={volume}\n            setVolume={setVolume}\n            format={format}\n            setFormat={setFormat}\n          />\n        </div>\n      </div>\n      <StatusConversion filePath={filePath} />\n      <StatusFFmpeg />\n      <StatusDownload />\n      <OpenFile\n        setCutEnd={setCutEnd}\n        setCutStart={setCutStart}\n        setVolume={setVolume}\n        setFormat={setFormat}\n        setVideoName={setVideoName}\n        setVideoSrc={setVideoSrc}\n        setFilePath={setFilePath}\n      />\n      <ModalUpdateStatus />\n    </div>\n  )\n}\n",
  "src/components/modalFFmpeg/IconCheck.tsx": "export function IconCheck() {\n  return (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 ml-2\"\n    >\n      <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n      <g\n        id=\"SVGRepo_tracerCarrier\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></g>\n      <g id=\"SVGRepo_iconCarrier\">\n        {' '}\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L12.7348 11.2045L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z\"\n          fill=\"#16a34a\"\n        ></path>{' '}\n      </g>\n    </svg>\n  )\n}\n",
  "src/components/modalFFmpeg/IconWarning.tsx": "export function IconWarning() {\n  return (\n    <svg\n      viewBox=\"0 0 512 512\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"#eab308\"\n      className=\"w-10 ml-3\"\n    >\n      <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n      <g\n        id=\"SVGRepo_tracerCarrier\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      ></g>\n      <g id=\"SVGRepo_iconCarrier\">\n        {' '}\n        <title>warning-filled</title>{' '}\n        <g\n          id=\"Page-1\"\n          stroke=\"none\"\n          strokeWidth=\"1\"\n          fill=\"none\"\n          fillRule=\"evenodd\"\n        >\n          {' '}\n          <g\n            id=\"add\"\n            fill=\"#eab308\"\n            transform=\"translate(32.000000, 42.666667)\"\n          >\n            {' '}\n            <path\n              d=\"M246.312928,5.62892705 C252.927596,9.40873724 258.409564,14.8907053 262.189374,21.5053731 L444.667042,340.84129 C456.358134,361.300701 449.250007,387.363834 428.790595,399.054926 C422.34376,402.738832 415.04715,404.676552 407.622001,404.676552 L42.6666667,404.676552 C19.1025173,404.676552 7.10542736e-15,385.574034 7.10542736e-15,362.009885 C7.10542736e-15,354.584736 1.93772021,347.288125 5.62162594,340.84129 L188.099293,21.5053731 C199.790385,1.04596203 225.853517,-6.06216498 246.312928,5.62892705 Z M224,272 C208.761905,272 197.333333,283.264 197.333333,298.282667 C197.333333,313.984 208.415584,325.248 224,325.248 C239.238095,325.248 250.666667,313.984 250.666667,298.624 C250.666667,283.264 239.238095,272 224,272 Z M245.333333,106.666667 L202.666667,106.666667 L202.666667,234.666667 L245.333333,234.666667 L245.333333,106.666667 Z\"\n              id=\"Combined-Shape\"\n            >\n              {' '}\n            </path>{' '}\n          </g>{' '}\n        </g>{' '}\n      </g>\n    </svg>\n  )\n}\n",
  "src/components/modalFFmpeg/statusDownload.tsx": "import { useCallback, useEffect } from 'react'\nimport { ProgressBar } from '../modalStatusConversion/progressbar'\nimport {\n  type FFmpegStoreType,\n  useFFmpegStore,\n  type IStatusDownload,\n} from '@/store/ffmpegStore'\n\nexport default function StatusDownload() {\n  const { statusDownload, setStatusDownload } = useFFmpegStore<FFmpegStoreType>(\n    (state) => state,\n  )\n\n  const statusProgress = useCallback((_event: any, action: IStatusDownload) => {\n    setStatusDownload(action)\n    if (\n      action.completed &&\n      action.message === 'FFmpeg downloaded and extracted successfully'\n    ) {\n      setTimeout(() => {\n        setStatusDownload(null)\n      }, 2000)\n    }\n  }, [])\n\n  useEffect(() => {\n    window.electron.receive('download-ffmpeg-status', statusProgress)\n    return () => {\n      window.electron.removeListener('download-ffmpeg-status', statusProgress)\n    }\n  }, [])\n\n  // Event key escape to close the modal\n  useEffect(() => {\n    const handleKeyPress = (event: any) => {\n      if (event.key === 'Escape') {\n        setStatusDownload(null)\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [])\n\n  return (\n    <div>\n      {statusDownload !== null && (\n        <div\n          className={\n            'fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-30'\n          }\n        >\n          <section\n            onClick={(event) => {\n              event.stopPropagation()\n            }}\n            className=\"relative flex flex-col bg-zinc-900 rounded-md p-6 gap-2 w-full max-w-xl\"\n          >\n            <p className=\"text-xl\">\n              {statusDownload.completed\n                ? statusDownload.message\n                : statusDownload.error !== ''\n                  ? statusDownload.error\n                  : statusDownload.message}\n            </p>\n            <p className=\"text-sm\">\n              {statusDownload.completed\n                ? statusDownload.totalLength\n                : statusDownload.elapsedLength}\n              {statusDownload.error !== '' ? '' : ' / '}\n              {statusDownload.totalLength}\n            </p>\n            <ProgressBar\n              value={\n                statusDownload.completed\n                  ? '100'\n                  : statusDownload.error !== ''\n                    ? 'error'\n                    : statusDownload.percentage.toString()\n              }\n            />\n          </section>\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/modalFFmpeg/statusFFmpeg.tsx": "import { useEffect } from 'react'\nimport ButtonComponent from '../configurationPanel/button'\nimport { type FFmpegStoreType, useFFmpegStore } from '@/store/ffmpegStore'\nimport { IconCheck } from './IconCheck'\nimport { IconWarning } from './IconWarning'\nenum ffmpegMessages {\n  FOUND = 'FFmpeg correctly installed',\n}\nexport default function StatusFFmpeg() {\n  const {\n    isFFmpegInstalled,\n    showModalStatus,\n    setShowModalStatus,\n    setIsFFmpegInstalled,\n    setMessageFFmpegError,\n    messageFFmpegError,\n    setStatusDownload,\n  } = useFFmpegStore<FFmpegStoreType>((state) => state)\n\n  // Listen to the ffmpeg-status event\n  useEffect(() => {\n    const debugParams = async (_event: any, action: string) => {\n      if (action === ffmpegMessages.FOUND) {\n        setIsFFmpegInstalled(true)\n      }\n      if (action !== ffmpegMessages.FOUND) {\n        setMessageFFmpegError(action)\n        setIsFFmpegInstalled(false)\n      }\n      setShowModalStatus(true)\n    }\n\n    window.electron.receive('ffmpeg-status', debugParams)\n\n    return () => {\n      window.electron.removeListener('ffmpeg-status', debugParams)\n    }\n  }, [])\n\n  // Event key escape to close the modal\n  useEffect(() => {\n    const handleKeyPress = (event: any) => {\n      if (event.key === 'Escape') {\n        setShowModalStatus(false)\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [])\n\n  return (\n    <div>\n      {showModalStatus && (\n        <div\n          className={\n            'fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-30'\n          }\n        >\n          <section\n            onClick={(event) => {\n              event.stopPropagation()\n            }}\n            className=\"relative flex flex-col bg-zinc-900 rounded-md p-6 gap-2 w-full max-w-xl\"\n          >\n            {isFFmpegInstalled ? (\n              <div className=\"flex justify-between\">\n                <span className=\"flex items-center\">\n                  <p className=\"text-xl\">FFmpeg is correctly installed</p>\n                  <IconCheck />\n                </span>\n                <ButtonComponent\n                  label=\"Close\"\n                  onClick={() => {\n                    setShowModalStatus(false)\n                  }}\n                  style=\"py-1 w-16 self-end mr-2 mt-2\"\n                />\n              </div>\n            ) : (\n              <div className=\"flex flex-col\">\n                <span className=\"flex items-center\">\n                  <p className=\"text-xl\">{messageFFmpegError}</p>\n                  <IconWarning />\n                </span>\n                <div className=\"flex justify-around my-6\">\n                  <ButtonComponent\n                    label=\"Find ffmpeg in system\"\n                    onClick={() => {\n                      window.electron.sendEvent('find-ffmpeg')\n                    }}\n                    style=\"py-1 w-16 text-xs\"\n                  />\n                  <ButtonComponent\n                    label=\"Download FFmpeg\"\n                    onClick={() => {\n                      setStatusDownload({\n                        error: '',\n                        message: 'Downloading FFmpeg...',\n                        percentage: 0,\n                        totalLength: '0',\n                        elapsedLength: '0',\n                        completed: false,\n                      })\n                      window.electron.sendEvent('download-ffmpeg')\n                    }}\n                    style=\"py-1 w-16 text-xs\"\n                  />\n                </div>\n                <ButtonComponent\n                  label=\"Close\"\n                  onClick={() => {\n                    setShowModalStatus(false)\n                  }}\n                  style=\"py-1 w-16 self-end mr-2 mt-2 bg-yellow-400 hover:bg-yellow-700\"\n                />\n              </div>\n            )}\n          </section>\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/modals/ModalUpdateStatus.tsx": "import { useCallback, useEffect, useState } from 'react'\nimport { ProgressBar } from '../modalStatusConversion/progressbar'\n\ninterface IDowloadProgress {\n  bytesPerSecond: number\n  percent: number\n  transferred: number\n  total: number\n}\n\nexport default function ModalUpdateStatus() {\n  const [updateDownload, setUpdateDownload] = useState<IDowloadProgress | null>(\n    null,\n  )\n\n  // const debug = useCallback((_event: any, action: IDowloadProgress) => {\n  //   console.log('debug: ', action)\n  // }, [])\n\n  // useEffect(() => {\n  //   window.electron.receive('debug', debug)\n  //   return () => {\n  //     window.electron.removeListener('debug', updateDownloadProgress)\n  //   }\n  // }, [])\n\n  const updateDownloadProgress = useCallback(\n    (_event: any, action: IDowloadProgress) => {\n      console.log(action)\n      setUpdateDownload(action)\n    },\n    [],\n  )\n\n  useEffect(() => {\n    window.electron.receive('update-download-progress', updateDownloadProgress)\n    return () => {\n      window.electron.removeListener(\n        'update-download-progress',\n        updateDownloadProgress,\n      )\n    }\n  }, [])\n\n  const formatBytes = (bytes: number, decimals = 2) => {\n    if (bytes === 0) return '0 Bytes'\n\n    const k = 1024\n    const dm = decimals < 0 ? 0 : decimals\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n  }\n\n  return (\n    <div>\n      {updateDownload !== null && (\n        <div\n          className={\n            'fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-30'\n          }\n        >\n          <section\n            onClick={(event) => {\n              event.stopPropagation()\n            }}\n            className=\"relative flex flex-col bg-zinc-900 rounded-md p-6 gap-2 w-full max-w-md\"\n          >\n            <p className=\"text-xl\">{'Downloading update...'}</p>\n            <p className=\"text-xs\">\n              {'Speed: '} {formatBytes(updateDownload.bytesPerSecond)}/s\n            </p>\n            <p className=\"text-xs\">\n              {'Transferred: '}\n              {formatBytes(updateDownload.transferred)} /{' '}\n              {formatBytes(updateDownload.total)}\n            </p>\n            <ProgressBar value={updateDownload.percent.toFixed(0) + ''} />\n          </section>\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/modalStatusConversion/progressbar.tsx": "import { EstatusConvertion } from './statusConversion'\n\nexport function ProgressBar({ value }: { value: string }) {\n  return (\n    <div className=\"w-full bg-gray-300 rounded-full h-6\">\n      <div\n        className={`h-6 rounded-full text-center text-white\n        ${\n          value === EstatusConvertion.Hidden ||\n          value === EstatusConvertion.Cancel ||\n          value === 'error'\n            ? 'bg-red-200'\n            : value === '100'\n              ? 'bg-green-600'\n              : 'bg-plyrColor'\n        } `}\n        style={{\n          width: `${value === EstatusConvertion.Hidden || value === 'error' ? 100 : value}%`,\n        }}\n      >\n        {value === EstatusConvertion.Hidden ||\n        value === EstatusConvertion.Cancel ||\n        value === 'error'\n          ? ''\n          : value + '%'}\n      </div>\n    </div>\n  )\n}\n",
  "src/components/modalStatusConversion/statusConversion.tsx": "import { useCallback, useEffect, useState } from 'react'\nimport { ProgressBar } from './progressbar'\nimport ButtonComponent from '../configurationPanel/button'\nexport enum EstatusConvertion {\n  Completed = 'Completed',\n  ConversionCompleted = 'Conversion completed',\n  ConversionFailed = 'Conversion failed',\n  Converting = 'Converting...',\n  Close = 'Close',\n  Cancel = 'Cancel',\n  Canceled = 'Canceled',\n  Hidden = 'Hidden',\n}\nexport default function StatusConversion({ filePath }: { filePath: string }) {\n  const timeToHiddenProgressBar = 1000\n  const [statusConvertion, setStatusConvertion] = useState<string>(\n    EstatusConvertion.Hidden,\n  )\n\n  const statusProgress = useCallback((_event: any, action: string) => {\n    setStatusConvertion(action)\n    if (action === EstatusConvertion.Completed) {\n      setTimeout(() => {\n        setStatusConvertion(EstatusConvertion.Hidden)\n      }, timeToHiddenProgressBar)\n    }\n  }, [])\n\n  useEffect(() => {\n    window.electron.receive('conversion-status', statusProgress)\n    return () => {\n      window.electron.removeListener('conversion-status', statusProgress)\n    }\n  }, [])\n\n  const handledButtonProgressBar = () => {\n    if (statusConvertion === EstatusConvertion.ConversionFailed) {\n      setStatusConvertion(EstatusConvertion.Hidden)\n      return\n    }\n\n    window.electron.sendEvent('cancel-conversion')\n\n    if (statusConvertion !== EstatusConvertion.Completed) {\n      setStatusConvertion(EstatusConvertion.Cancel)\n      setTimeout(() => {\n        setStatusConvertion(EstatusConvertion.Hidden)\n      }, timeToHiddenProgressBar)\n    }\n  }\n\n  // Event key escape to close the modal\n  useEffect(() => {\n    const handleKeyPress = (event: any) => {\n      if (event.key === 'Escape') {\n        setStatusConvertion(EstatusConvertion.Hidden)\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [])\n\n  return (\n    <div>\n      {statusConvertion !== EstatusConvertion.Hidden && (\n        <div\n          className={\n            'fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-30'\n          }\n        >\n          <section\n            onClick={(event) => {\n              event.stopPropagation()\n            }}\n            className=\"relative flex flex-col bg-zinc-900 rounded-md p-6 gap-2 w-full max-w-xl\"\n          >\n            <p className=\"text-xl\">\n              {statusConvertion === EstatusConvertion.Completed\n                ? EstatusConvertion.ConversionCompleted\n                : statusConvertion === EstatusConvertion.ConversionFailed\n                  ? EstatusConvertion.ConversionFailed\n                  : statusConvertion === EstatusConvertion.Cancel\n                    ? EstatusConvertion.Canceled\n                    : EstatusConvertion.Converting}\n            </p>\n            <p className=\"text-sm\">{filePath}</p>\n            <ProgressBar\n              value={\n                statusConvertion === EstatusConvertion.Completed\n                  ? '100'\n                  : statusConvertion === EstatusConvertion.ConversionFailed\n                    ? EstatusConvertion.Cancel\n                    : statusConvertion\n              }\n            />\n            <ButtonComponent\n              label={\n                statusConvertion === EstatusConvertion.Completed\n                  ? EstatusConvertion.Close\n                  : statusConvertion === EstatusConvertion.ConversionFailed\n                    ? EstatusConvertion.Close\n                    : EstatusConvertion.Cancel\n              }\n              onClick={() => {\n                handledButtonProgressBar()\n              }}\n              style=\"py-1 w-16 self-end mr-2 mt-2\"\n            />\n          </section>\n        </div>\n      )}\n    </div>\n  )\n}\n",
  "src/components/openFile.tsx": "import { useCallback, useEffect } from 'react'\n\nexport function OpenFile({\n  setCutEnd,\n  setCutStart,\n  setVolume,\n  setFormat,\n  setVideoName,\n  setVideoSrc,\n  setFilePath,\n}: {\n  setCutEnd: (value: string) => void\n  setCutStart: (value: string) => void\n  setVolume: (value: { name: string; value: string }) => void\n  setFormat: (value: { name: string; value: string }) => void\n  setVideoName: (value: string) => void\n  setVideoSrc: (value: string) => void\n  setFilePath: (value: string) => void\n}) {\n  const openFile = useCallback((_event: any, pathOrInvalid: string) => {\n    if (pathOrInvalid === 'Invalid file') {\n      alert('Invalid file')\n      return\n    }\n    const videoName = pathOrInvalid.split('/').pop() ?? ''\n    setCutEnd('00:00:00')\n    setCutStart('00:00:00')\n    setVolume({ name: 'None', value: '' })\n    setFormat({ name: 'None', value: '' })\n    setVideoName(videoName)\n    setVideoSrc(pathOrInvalid)\n    setFilePath(pathOrInvalid)\n  }, [])\n\n  useEffect(() => {\n    window.electron.receive('open-file', openFile)\n    return () => {\n      window.electron.removeListener('open-file', openFile)\n    }\n  }, [])\n\n  // Event key escape to close the modal\n  useEffect(() => {\n    const handleKeyPress = (event: any) => {\n      if (\n        event.target.tagName === 'INPUT' ||\n        event.target.tagName === 'TEXTAREA' ||\n        event.target.tagName === 'SELECT'\n      ) {\n        return\n      }\n      if (event.key === 'o') {\n        window.electron.sendEvent('open-file')\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [])\n\n  return <></>\n}\n",
  "src/components/player/player.tsx": "import { type APITypes } from 'plyr-react'\nimport ButtonComponent from '../configurationPanel/button'\n\nexport function Ply({\n  idPlayer,\n  plyrComponent,\n  onDragOver,\n  onDrop,\n  playerRef,\n  jumpToSecond,\n  children,\n}: {\n  idPlayer: string\n  plyrComponent: JSX.Element\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void\n  playerRef: React.MutableRefObject<APITypes | null>\n  jumpToSecond: (time: number) => void\n  children?: React.ReactNode\n}) {\n  return (\n    <div\n      onDragOver={onDragOver}\n      onDrop={onDrop}\n      className=\"w-full flex flex-col mb-2\"\n    >\n      <div id={idPlayer}>{plyrComponent}</div>\n      <div id=\"additionalCId\" className=\"flex flex-row gap-x-2 mt-2 flex-wrap\">\n        <ButtonComponent\n          label=\"-1 Sec\"\n          onClick={() => {\n            if (playerRef?.current !== null) {\n              jumpToSecond(playerRef.current.plyr.currentTime - 1)\n            }\n          }}\n        />\n        <ButtonComponent\n          label=\"+1 Sec\"\n          onClick={() => {\n            if (playerRef?.current !== null) {\n              jumpToSecond(playerRef.current.plyr.currentTime + 1)\n            }\n          }}\n        />\n        {children}\n      </div>\n    </div>\n  )\n}\n",
  "src/components/player/tabHeader.tsx": "export function TabHeader({\n  label,\n  selectTab,\n  currentTab,\n  setSelectTab,\n}: {\n  label: string\n  selectTab: number\n  currentTab: number\n  setSelectTab: React.Dispatch<React.SetStateAction<number>>\n}) {\n  return (\n    <button\n      className={`headerButton\n      ${selectTab === currentTab ? 'bg-white' : 'text-blue-100 hover:bg-white/[0.12] hover:text-white border-2 border-zinc-700'}`}\n      onClick={() => {\n        setSelectTab(selectTab)\n      }}\n    >\n      {label}\n    </button>\n  )\n}\n",
  "src/components/title.tsx": "export function Title() {\n  return (\n    <div id=\"titleId\" className=\"flex py-2 items-center\">\n      <img src=\"iconPlayFactory.png\" alt=\"\" className=\"h-16\" />\n      <h1 className=\"ml-4 text-4xl font-bold\">Play Factory</h1>\n    </div>\n  )\n}\n",
  "src/index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\nhtml {\n  color: #d3d1d1 !important;\n  background-color: #242424;\n}\n",
  "src/main.tsx": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport 'plyr-react/plyr.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n\n// Remove Preload scripts loading\npostMessage({ payload: 'removeLoading' }, '*')\n\n// Use contextBridge\nwindow.ipcRenderer.on('main-process-message', (_event, message) => {\n  console.log(message)\n})\n",
  "src/store/ffmpegStore.ts": "import { type StateCreator, create } from 'zustand'\nimport { persist } from 'zustand/middleware'\nexport interface IStatusDownload {\n  message: string\n  percentage: number\n  totalLength: string\n  elapsedLength: string\n  completed: boolean\n  error: string\n}\n\nexport interface FFmpegStoreType {\n  isFFmpegInstalled: boolean\n  setIsFFmpegInstalled: (isFFmpegInstalled: boolean) => void\n\n  showModalStatus: boolean\n  setShowModalStatus: (showModalStatus: boolean) => void\n\n  messageFFmpegError: string\n  setMessageFFmpegError: (messageError: string) => void\n\n  statusDownload: IStatusDownload | null\n  setStatusDownload: (statusDownload: IStatusDownload | null) => void\n}\n\nconst storeFFmpeg: StateCreator<FFmpegStoreType> = (set) => ({\n  isFFmpegInstalled: false,\n  setIsFFmpegInstalled: (isFFmpegInstalled) => {\n    set({ isFFmpegInstalled })\n  },\n\n  showModalStatus: false,\n  setShowModalStatus: (showModalStatus) => {\n    set({ showModalStatus })\n  },\n\n  messageFFmpegError: '',\n  setMessageFFmpegError: (messageFFmpegError) => {\n    set({ messageFFmpegError })\n  },\n\n  statusDownload: null,\n  setStatusDownload: (statusDownload) => {\n    set({ statusDownload })\n  },\n})\n\nexport const useFFmpegStore = create<FFmpegStoreType>()(\n  persist(storeFFmpeg, {\n    name: 'ffmpeg-storage',\n    partialize: (state) => ({\n      isFFmpegInstalled: state.isFFmpegInstalled,\n    }),\n  }),\n)\n",
  "src/vite-env.d.ts": "/// <reference types=\"vite/client\" />\n",
  "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './index.html',\n    \"./src/**/*.{html,js,jsx,tsx,ts}\"],\n  theme: {\n    extend: {\n      colors:{\n        plyrColor: '#00b2ff'\n      },\n      borderColor:{\n        plyrColor: '#00b2ff'\n      }\n    },\n  },\n  plugins: [],\n}\n",
  "Todo.txt": "[Bugs]\n  * \n[Rules to build]\n  - Update version in \"package.json\" and \"index.html\"\n  - Check version conversion in \"electron/main.ts\", version 1 is release version, version 2 is just to unpacked version\n  - git tag -a 0.0.9 -m \"0.0.9\"\n  - git push origin 0.0.9\n",
  "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\n      \"ESNext\",\n      \"DOM\",\n      \"DOM.Iterable\"\n    ],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ],\n      \"components/*\": [\n        \"./src/components/*\"\n      ],\n      \"coomon/*\": [\n        \"./src/common/*\"\n      ],\n    },\n  },\n  \"include\": [\n    \"src\",\n    \"vite.config.ts\",\n    \"electron\"\n  ],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.node.json\"\n    }\n  ]\n}",
  "tsconfig.node.json": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n",
  "vite.config.ts": "import { defineConfig } from 'vite'\nimport path from 'node:path'\nimport electron from 'vite-plugin-electron/simple'\nimport react from '@vitejs/plugin-react'\nimport tsconfigPaths from 'vite-tsconfig-paths'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths(),\n    electron({\n      main: {\n        // Shortcut of `build.lib.entry`.\n        entry: 'electron/main.ts',\n      },\n      preload: {\n        // Shortcut of `build.rollupOptions.input`.\n        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.\n        input: path.join(__dirname, 'electron/preload.ts'),\n      },\n      // Ployfill the Electron and Node.js built-in modules for Renderer process.\n      // See 👉 https://github.com/electron-vite/vite-plugin-electron-renderer\n      renderer: {},\n    }),\n  ],\n})\n"
}